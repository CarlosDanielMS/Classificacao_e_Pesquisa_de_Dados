class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None


class HashTableChaining:
    def __init__(self, size):
        self.size = size
        self.table = {i: None for i in range(size)}
    
    def _hash(self, key):
        """Função de hash simples"""
        return hash(key) % self.size
    
    def insert(self, key, value):
        """Insere um valor na hash table com lista encadeada"""
        index = self._hash(key)
        new_node = Node(key, value)
        
        if self.table[index] is None:
            self.table[index] = new_node
        else:
            current = self.table[index]
            while current.next:
                if current.key == key and current.value == value:
                    return  # Evita duplicatas
                current = current.next
            current.next = new_node
    
    def search(self, key, value):
        """Busca um valor na hash table"""
        index = self._hash(key)
        current = self.table[index]
        while current:
            if current.key == key and current.value == value:
                return True
            current = current.next
        return False
    
    def delete(self, key, value):
        """Remove um valor da hash table"""
        index = self._hash(key)
        current = self.table[index]
        prev = None
        
        while current:
            if current.key == key and current.value == value:
                if prev:
                    prev.next = current.next
                else:
                    self.table[index] = current.next
                return
            prev = current
            current = current.next
    
    def __str__(self):
        result = {}
        for i in range(self.size):
            current = self.table[i]
            chain = []
            while current:
                chain.append((current.key, current.value))
                current = current.next
            result[i] = chain
        return str(result)


# Exemplo de uso
htable = HashTableChaining(10)
htable.insert("nome", "Alice")
htable.insert("nome", "Bob")
htable.insert("idade", 25)
htable.insert("idade", 30)

print("Tabela hash com listas encadeadas após inserções:", htable)
print("Buscar por ('nome', 'Alice') na hash:", htable.search("nome", "Alice"))
htable.delete("nome", "Alice")
print("Tabela hash com listas encadeadas após remoção de ('nome', 'Alice'):", htable)


